[
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "models.contact",
        "description": "models.contact",
        "isExtraImport": true,
        "detail": "models.contact",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Utilisateur",
        "importPath": "models.utilisateur",
        "description": "models.utilisateur",
        "isExtraImport": true,
        "detail": "models.utilisateur",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "models.interaction",
        "description": "models.interaction",
        "isExtraImport": true,
        "detail": "models.interaction",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "importPath": "models.interaction",
        "description": "models.interaction",
        "isExtraImport": true,
        "detail": "models.interaction",
        "documentation": {}
    },
    {
        "label": "InteractionCreate",
        "importPath": "schemas.interaction",
        "description": "schemas.interaction",
        "isExtraImport": true,
        "detail": "schemas.interaction",
        "documentation": {}
    },
    {
        "label": "InteractionRead",
        "importPath": "schemas.interaction",
        "description": "schemas.interaction",
        "isExtraImport": true,
        "detail": "schemas.interaction",
        "documentation": {}
    },
    {
        "label": "Opportunite",
        "importPath": "models.opportunite",
        "description": "models.opportunite",
        "isExtraImport": true,
        "detail": "models.opportunite",
        "documentation": {}
    },
    {
        "label": "Opportunite",
        "importPath": "models.opportunite",
        "description": "models.opportunite",
        "isExtraImport": true,
        "detail": "models.opportunite",
        "documentation": {}
    },
    {
        "label": "OpportuniteCreate",
        "importPath": "schemas.opportunite",
        "description": "schemas.opportunite",
        "isExtraImport": true,
        "detail": "schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "OpportuniteCreate",
        "importPath": "schemas.opportunite",
        "description": "schemas.opportunite",
        "isExtraImport": true,
        "detail": "schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "OpportuniteRead",
        "importPath": "schemas.opportunite",
        "description": "schemas.opportunite",
        "isExtraImport": true,
        "detail": "schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Tache",
        "importPath": "models.tache",
        "description": "models.tache",
        "isExtraImport": true,
        "detail": "models.tache",
        "documentation": {}
    },
    {
        "label": "Tache",
        "importPath": "models.tache",
        "description": "models.tache",
        "isExtraImport": true,
        "detail": "models.tache",
        "documentation": {}
    },
    {
        "label": "TacheCreate",
        "importPath": "schemas.tache",
        "description": "schemas.tache",
        "isExtraImport": true,
        "detail": "schemas.tache",
        "documentation": {}
    },
    {
        "label": "TacheUpdate",
        "importPath": "schemas.tache",
        "description": "schemas.tache",
        "isExtraImport": true,
        "detail": "schemas.tache",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "ffmpeg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ffmpeg",
        "description": "ffmpeg",
        "detail": "ffmpeg",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "VideoCall",
        "importPath": "models.video_call",
        "description": "models.video_call",
        "isExtraImport": true,
        "detail": "models.video_call",
        "documentation": {}
    },
    {
        "label": "VideoRecording",
        "importPath": "models.video_call",
        "description": "models.video_call",
        "isExtraImport": true,
        "detail": "models.video_call",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "test_connection",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "UtilisateurRead",
        "importPath": "schemas.Utilisateur",
        "description": "schemas.Utilisateur",
        "isExtraImport": true,
        "detail": "schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurCreate",
        "importPath": "schemas.Utilisateur",
        "description": "schemas.Utilisateur",
        "isExtraImport": true,
        "detail": "schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurUpdate",
        "importPath": "schemas.Utilisateur",
        "description": "schemas.Utilisateur",
        "isExtraImport": true,
        "detail": "schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "get_utilisateurs",
        "importPath": "crud.Utilisateur",
        "description": "crud.Utilisateur",
        "isExtraImport": true,
        "detail": "crud.Utilisateur",
        "documentation": {}
    },
    {
        "label": "get_utilisateur",
        "importPath": "crud.Utilisateur",
        "description": "crud.Utilisateur",
        "isExtraImport": true,
        "detail": "crud.Utilisateur",
        "documentation": {}
    },
    {
        "label": "create_utilisateur",
        "importPath": "crud.Utilisateur",
        "description": "crud.Utilisateur",
        "isExtraImport": true,
        "detail": "crud.Utilisateur",
        "documentation": {}
    },
    {
        "label": "update_utilisateur",
        "importPath": "crud.Utilisateur",
        "description": "crud.Utilisateur",
        "isExtraImport": true,
        "detail": "crud.Utilisateur",
        "documentation": {}
    },
    {
        "label": "delete_utilisateur",
        "importPath": "crud.Utilisateur",
        "description": "crud.Utilisateur",
        "isExtraImport": true,
        "detail": "crud.Utilisateur",
        "documentation": {}
    },
    {
        "label": "RtcTokenBuilder",
        "importPath": "agora_token_builder",
        "description": "agora_token_builder",
        "isExtraImport": true,
        "detail": "agora_token_builder",
        "documentation": {}
    },
    {
        "label": "ContactCreate",
        "importPath": "schemas.contact",
        "description": "schemas.contact",
        "isExtraImport": true,
        "detail": "schemas.contact",
        "documentation": {}
    },
    {
        "label": "ContactRead",
        "importPath": "schemas.contact",
        "description": "schemas.contact",
        "isExtraImport": true,
        "detail": "schemas.contact",
        "documentation": {}
    },
    {
        "label": "ContactUpdate",
        "importPath": "schemas.contact",
        "description": "schemas.contact",
        "isExtraImport": true,
        "detail": "schemas.contact",
        "documentation": {}
    },
    {
        "label": "count_contacts",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "get_contacts",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "get_contact",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "create_contact",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "update_contact",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "delete_contact",
        "importPath": "crud.Contact",
        "description": "crud.Contact",
        "isExtraImport": true,
        "detail": "crud.Contact",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "importPath": "crud.email_service",
        "description": "crud.email_service",
        "isExtraImport": true,
        "detail": "crud.email_service",
        "documentation": {}
    },
    {
        "label": "EmailRequest",
        "importPath": "schemas.email",
        "description": "schemas.email",
        "isExtraImport": true,
        "detail": "schemas.email",
        "documentation": {}
    },
    {
        "label": "Entreprise",
        "importPath": "models.entreprise",
        "description": "models.entreprise",
        "isExtraImport": true,
        "detail": "models.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseCreate",
        "importPath": "schemas.entreprise",
        "description": "schemas.entreprise",
        "isExtraImport": true,
        "detail": "schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseRead",
        "importPath": "schemas.entreprise",
        "description": "schemas.entreprise",
        "isExtraImport": true,
        "detail": "schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseUpdate",
        "importPath": "schemas.entreprise",
        "description": "schemas.entreprise",
        "isExtraImport": true,
        "detail": "schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "at the top",
        "importPath": "datetime import datetime  # Add this",
        "description": "datetime import datetime  # Add this",
        "isExtraImport": true,
        "detail": "datetime import datetime  # Add this",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "get_interactions",
        "importPath": "crud.interaction",
        "description": "crud.interaction",
        "isExtraImport": true,
        "detail": "crud.interaction",
        "documentation": {}
    },
    {
        "label": "get_interaction",
        "importPath": "crud.interaction",
        "description": "crud.interaction",
        "isExtraImport": true,
        "detail": "crud.interaction",
        "documentation": {}
    },
    {
        "label": "delete_interaction",
        "importPath": "crud.interaction",
        "description": "crud.interaction",
        "isExtraImport": true,
        "detail": "crud.interaction",
        "documentation": {}
    },
    {
        "label": "create_opportunite",
        "importPath": "crud.opportunite",
        "description": "crud.opportunite",
        "isExtraImport": true,
        "detail": "crud.opportunite",
        "documentation": {}
    },
    {
        "label": "get_opportunites",
        "importPath": "crud.opportunite",
        "description": "crud.opportunite",
        "isExtraImport": true,
        "detail": "crud.opportunite",
        "documentation": {}
    },
    {
        "label": "get_opportunite",
        "importPath": "crud.opportunite",
        "description": "crud.opportunite",
        "isExtraImport": true,
        "detail": "crud.opportunite",
        "documentation": {}
    },
    {
        "label": "delete_opportunite",
        "importPath": "crud.opportunite",
        "description": "crud.opportunite",
        "isExtraImport": true,
        "detail": "crud.opportunite",
        "documentation": {}
    },
    {
        "label": "tache",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "tache",
        "importPath": "crud",
        "description": "crud",
        "isExtraImport": true,
        "detail": "crud",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "VideoCallService",
        "importPath": "crud.video_service",
        "description": "crud.video_service",
        "isExtraImport": true,
        "detail": "crud.video_service",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "tache",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "contact",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "opportunite",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "Utilisateur",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "entreprise",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "interaction",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "email_controller",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "video_calls  # 👉 si tu l’as",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "EmailService",
        "kind": 6,
        "importPath": "back.app.crud.email_service",
        "description": "back.app.crud.email_service",
        "peekOfCode": "class EmailService:\n    def __init__(self):\n        self.smtp_host = os.getenv(\"SMTP_HOST\", \"smtp.gmail.com\")\n        self.smtp_port = int(os.getenv(\"SMTP_PORT\", 587))\n        self.sender_email = os.getenv(\"SENDER_EMAIL\")\n        self.sender_password = os.getenv(\"SENDER_PASSWORD\")\n        if not self.sender_email or not self.sender_password:\n            raise ValueError(\"Email credentials not configured in environment variables\")\n    def send_email(self, recipient: str, subject: str, body: str) -> bool:\n        try:",
        "detail": "back.app.crud.email_service",
        "documentation": {}
    },
    {
        "label": "get_tache",
        "kind": 2,
        "importPath": "back.app.crud.tache",
        "description": "back.app.crud.tache",
        "peekOfCode": "def get_tache(db: Session, id_tache: int):\n    return db.query(Tache).filter(Tache.id_tache == id_tache).first()\ndef get_taches(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(Tache).offset(skip).limit(limit).all()\nasync def create_tache(db: AsyncSession, tache: TacheCreate):\n    db_tache = Tache(**tache.dict())\n    db.add(db_tache)\n    await db.commit()\n    await db.refresh(db_tache)\n    return db_tache",
        "detail": "back.app.crud.tache",
        "documentation": {}
    },
    {
        "label": "get_taches",
        "kind": 2,
        "importPath": "back.app.crud.tache",
        "description": "back.app.crud.tache",
        "peekOfCode": "def get_taches(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(Tache).offset(skip).limit(limit).all()\nasync def create_tache(db: AsyncSession, tache: TacheCreate):\n    db_tache = Tache(**tache.dict())\n    db.add(db_tache)\n    await db.commit()\n    await db.refresh(db_tache)\n    return db_tache\ndef update_tache(db: Session, id_tache: int, tache_update: TacheUpdate):\n    db_tache = get_tache(db, id_tache)",
        "detail": "back.app.crud.tache",
        "documentation": {}
    },
    {
        "label": "update_tache",
        "kind": 2,
        "importPath": "back.app.crud.tache",
        "description": "back.app.crud.tache",
        "peekOfCode": "def update_tache(db: Session, id_tache: int, tache_update: TacheUpdate):\n    db_tache = get_tache(db, id_tache)\n    if not db_tache:\n        return None\n    update_data = tache_update.dict(exclude_unset=True)\n    for key, value in update_data.items():\n        setattr(db_tache, key, value)\n    db.commit()\n    db.refresh(db_tache)\n    return db_tache",
        "detail": "back.app.crud.tache",
        "documentation": {}
    },
    {
        "label": "delete_tache",
        "kind": 2,
        "importPath": "back.app.crud.tache",
        "description": "back.app.crud.tache",
        "peekOfCode": "def delete_tache(db: Session, id_tache: int):\n    db_tache = get_tache(db, id_tache)\n    if not db_tache:\n        return None\n    db.delete(db_tache)\n    db.commit()\n    return db_tache",
        "detail": "back.app.crud.tache",
        "documentation": {}
    },
    {
        "label": "VideoCallService",
        "kind": 6,
        "importPath": "back.app.crud.video_service",
        "description": "back.app.crud.video_service",
        "peekOfCode": "class VideoCallService:\n    def __init__(self, db: Session):\n        self.db = db\n        self.recordings_dir = \"media/recordings\"\n        os.makedirs(self.recordings_dir, exist_ok=True)\n    async def start_call(self, contact_id: int, utilisateur_id: int) -> Dict[str, Any]:\n        \"\"\"Démarrer un nouvel appel vidéo\"\"\"\n        call = VideoCall(\n            contact_id=contact_id,\n            utilisateur_id=utilisateur_id,",
        "detail": "back.app.crud.video_service",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "back.app.models.contact",
        "description": "back.app.models.contact",
        "peekOfCode": "class Contact(Base):\n    __tablename__ = \"contact\"\n    id_contact = Column(Integer, primary_key=True, index=True)\n    nom = Column(String(50), nullable=False)\n    prenom = Column(String(50), nullable=False)\n    entreprise = Column(String(100), nullable=True)\n    telephone = Column(String(20), nullable=True)\n    email = Column(String(100), nullable=True)\n    adresse = Column(Text, nullable=True)\n    fonction = Column(String(50), nullable=True)",
        "detail": "back.app.models.contact",
        "documentation": {}
    },
    {
        "label": "Entreprise",
        "kind": 6,
        "importPath": "back.app.models.entreprise",
        "description": "back.app.models.entreprise",
        "peekOfCode": "class Entreprise(Base):\n    __tablename__ = \"entreprise\"\n    id_entreprise = Column(Integer, primary_key=True, index=True)\n    nom = Column(String(100), nullable=False)\n    adresse = Column(Text)\n    secteur = Column(String(50))\n    telephone = Column(String(20), unique=True)\n    email = Column(String(100), unique=True)\n    opportunites = relationship(\"Opportunite\", back_populates=\"entreprise\")",
        "detail": "back.app.models.entreprise",
        "documentation": {}
    },
    {
        "label": "Interaction",
        "kind": 6,
        "importPath": "back.app.models.interaction",
        "description": "back.app.models.interaction",
        "peekOfCode": "class Interaction(Base):\n    __tablename__ = \"interaction\"\n    id_interaction = Column(Integer, primary_key=True, index=True)\n    type = Column(String(50))\n    date_interaction = Column(DateTime)\n    contenu = Column(Text)\n    fichier_joint = Column(String(255))\n    id_contact = Column(Integer, ForeignKey(\"contact.id_contact\"))\n    contact = relationship(\"Contact\", back_populates=\"interactions\")",
        "detail": "back.app.models.interaction",
        "documentation": {}
    },
    {
        "label": "Opportunite",
        "kind": 6,
        "importPath": "back.app.models.opportunite",
        "description": "back.app.models.opportunite",
        "peekOfCode": "class Opportunite(Base):\n    __tablename__ = \"opportunites\"\n    id_opportunite = Column(Integer, primary_key=True, index=True)\n    titre = Column(String(100))\n    description = Column(Text)\n    date_interaction = Column(DateTime)\n    contenu = Column(Text)\n    date_creation = Column(Date)\n    prob_abill_suc = Column(Integer)\n    statut = Column(String(30))",
        "detail": "back.app.models.opportunite",
        "documentation": {}
    },
    {
        "label": "Tache",
        "kind": 6,
        "importPath": "back.app.models.tache",
        "description": "back.app.models.tache",
        "peekOfCode": "class Tache(Base):\n    __tablename__ = \"tache\"\n    id_tache = Column(Integer, primary_key=True, index=True)\n    titre = Column(String(100), nullable=False)\n    description = Column(Text, nullable=True)\n    date_echeance = Column(Date, nullable=True)\n    est_recurrente = Column(Boolean, default=False)\n    rappel = Column(DateTime, nullable=True)\n    statut = Column(String(30), nullable=True)\n    id_opportunite = Column(Integer, ForeignKey(\"opportunites.id_opportunite\"), nullable=False)",
        "detail": "back.app.models.tache",
        "documentation": {}
    },
    {
        "label": "Utilisateur",
        "kind": 6,
        "importPath": "back.app.models.utilisateur",
        "description": "back.app.models.utilisateur",
        "peekOfCode": "class Utilisateur(Base):\n    __tablename__ = \"utilisateur\"  # convention lowercase + snake_case\n    id_utilisateur = Column(Integer, primary_key=True, index=True)\n    nom = Column(String(50), nullable=False)\n    prenom = Column(String(50), nullable=False)\n    email = Column(String(100), unique=True, index=True, nullable=False)\n    role = Column(String(100), nullable=False)\n    numero_tel = Column(String(10), nullable=False)\n    photo_profil = Column(String(255), nullable=True)\n    contacts = relationship(\"Contact\", back_populates=\"utilisateur\")",
        "detail": "back.app.models.utilisateur",
        "documentation": {}
    },
    {
        "label": "VideoCall",
        "kind": 6,
        "importPath": "back.app.models.video_call",
        "description": "back.app.models.video_call",
        "peekOfCode": "class VideoCall(Base):\n    __tablename__ = \"video_calls\"\n    id = Column(Integer, primary_key=True, index=True)\n    contact_id = Column(Integer, ForeignKey(\"contacts.id_contact\"))\n    utilisateur_id = Column(Integer, ForeignKey(\"utilisateurs.id_utilisateur\"))\n    started_at = Column(DateTime, default=datetime.utcnow)\n    ended_at = Column(DateTime, nullable=True)\n    duration = Column(Integer, default=0)  # en secondes\n    status = Column(String(50), default=\"active\")  # active, ended, failed\n    created_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "back.app.models.video_call",
        "documentation": {}
    },
    {
        "label": "VideoRecording",
        "kind": 6,
        "importPath": "back.app.models.video_call",
        "description": "back.app.models.video_call",
        "peekOfCode": "class VideoRecording(Base):\n    __tablename__ = \"video_recordings\"\n    id = Column(Integer, primary_key=True, index=True)\n    call_id = Column(Integer, ForeignKey(\"video_calls.id\"))\n    recording_id = Column(String(100), unique=True, index=True)\n    file_path = Column(String(500))\n    file_size = Column(Integer, default=0)\n    duration = Column(Integer, default=0)\n    format = Column(String(20), default=\"webm\")\n    status = Column(String(50), default=\"recording\")  # recording, completed, failed",
        "detail": "back.app.models.video_call",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "back.app.models.video_call",
        "description": "back.app.models.video_call",
        "peekOfCode": "Base = declarative_base()\nclass VideoCall(Base):\n    __tablename__ = \"video_calls\"\n    id = Column(Integer, primary_key=True, index=True)\n    contact_id = Column(Integer, ForeignKey(\"contacts.id_contact\"))\n    utilisateur_id = Column(Integer, ForeignKey(\"utilisateurs.id_utilisateur\"))\n    started_at = Column(DateTime, default=datetime.utcnow)\n    ended_at = Column(DateTime, nullable=True)\n    duration = Column(Integer, default=0)  # en secondes\n    status = Column(String(50), default=\"active\")  # active, ended, failed",
        "detail": "back.app.models.video_call",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.Utilisateur",
        "description": "back.app.routers.Utilisateur",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/utilisateurs\", response_model=List[UtilisateurRead])\nasync def read_utilisateurs(db: AsyncSession = Depends(get_async_session)):\n    return await get_utilisateurs(db)\n@router.get(\"/utilisateurs/{utilisateur_id}\", response_model=UtilisateurRead)\nasync def read_utilisateur(utilisateur_id: int, db: AsyncSession = Depends(get_async_session)):\n    utilisateur = await get_utilisateur(db, utilisateur_id)\n    if utilisateur is None:\n        raise HTTPException(status_code=404, detail=\"Utilisateur non trouvé\")\n    return utilisateur",
        "detail": "back.app.routers.Utilisateur",
        "documentation": {}
    },
    {
        "label": "get_agora_token",
        "kind": 2,
        "importPath": "back.app.routers.agora_token",
        "description": "back.app.routers.agora_token",
        "peekOfCode": "def get_agora_token(channel_name: str, uid: int = 0):\n    app_id = os.getenv(\"AGORA_APP_ID\")\n    app_cert = os.getenv(\"AGORA_CERTIFICATE\")\n    expire_time = 3600\n    current_time = int(time.time())\n    expire_at = current_time + expire_time\n    token = RtcTokenBuilder.buildTokenWithUid(\n        app_id, app_cert, channel_name, uid, 1, expire_at\n    )\n    return {",
        "detail": "back.app.routers.agora_token",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "back.app.routers.agora_token",
        "description": "back.app.routers.agora_token",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/agora-token\")\ndef get_agora_token(channel_name: str, uid: int = 0):\n    app_id = os.getenv(\"AGORA_APP_ID\")\n    app_cert = os.getenv(\"AGORA_CERTIFICATE\")\n    expire_time = 3600\n    current_time = int(time.time())\n    expire_at = current_time + expire_time\n    token = RtcTokenBuilder.buildTokenWithUid(\n        app_id, app_cert, channel_name, uid, 1, expire_at",
        "detail": "back.app.routers.agora_token",
        "documentation": {}
    },
    {
        "label": "save_profile_picture",
        "kind": 2,
        "importPath": "back.app.routers.contact",
        "description": "back.app.routers.contact",
        "peekOfCode": "def save_profile_picture(file: UploadFile):\n    ext = os.path.splitext(file.filename)[1]\n    filename = f\"{uuid.uuid4()}{ext}\"\n    filepath = f\"media/photos/{filename}\"\n    with open(filepath, \"wb\") as buffer:\n        buffer.write(file.file.read())\n    return filepath\n@router.post(\"\", response_model=ContactRead, status_code=status.HTTP_201_CREATED)\nasync def create_contact_route(\n    nom: str = Form(...),",
        "detail": "back.app.routers.contact",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.contact",
        "description": "back.app.routers.contact",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/contacts\",\n    tags=[\"contacts\"]\n)\nimport uuid\nimport os\nfrom fastapi import UploadFile\ndef save_profile_picture(file: UploadFile):\n    ext = os.path.splitext(file.filename)[1]\n    filename = f\"{uuid.uuid4()}{ext}\"",
        "detail": "back.app.routers.contact",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.email_controller",
        "description": "back.app.routers.email_controller",
        "peekOfCode": "router = APIRouter()\nemail_service = EmailService()\n@router.post(\"/send-email\")\nasync def send_email(email_request: EmailRequest):\n    try:\n        success = email_service.send_email(\n            recipient=email_request.destinator,\n            subject=email_request.subject,\n            body=email_request.body\n        )",
        "detail": "back.app.routers.email_controller",
        "documentation": {}
    },
    {
        "label": "email_service",
        "kind": 5,
        "importPath": "back.app.routers.email_controller",
        "description": "back.app.routers.email_controller",
        "peekOfCode": "email_service = EmailService()\n@router.post(\"/send-email\")\nasync def send_email(email_request: EmailRequest):\n    try:\n        success = email_service.send_email(\n            recipient=email_request.destinator,\n            subject=email_request.subject,\n            body=email_request.body\n        )\n        if not success:",
        "detail": "back.app.routers.email_controller",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.entreprise",
        "description": "back.app.routers.entreprise",
        "peekOfCode": "router = APIRouter(prefix=\"/entreprises\", tags=[\"entreprises\"])\n@router.post(\"\", response_model=EntrepriseRead, status_code=status.HTTP_201_CREATED)\nasync def create_entreprise(entreprise: EntrepriseCreate, session: AsyncSession = Depends(get_async_session)):\n    new_entreprise = Entreprise(**entreprise.dict())\n    session.add(new_entreprise)\n    await session.commit()\n    await session.refresh(new_entreprise)\n    return new_entreprise\n@router.get(\"\", response_model=List[EntrepriseRead])\nasync def get_entreprises(session: AsyncSession = Depends(get_async_session)):",
        "detail": "back.app.routers.entreprise",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.interaction",
        "description": "back.app.routers.interaction",
        "peekOfCode": "router = APIRouter(prefix=\"/interactions\", tags=[\"interactions\"])\n@router.post(\"\", response_model=InteractionRead, status_code=status.HTTP_201_CREATED)\nasync def create_interaction(\n    type: str = Form(...),\n    date_interaction: str = Form(...),\n    contenu: str = Form(...),\n    id_contact: int = Form(...),\n    fichier_joint: UploadFile = File(None),\n    session: AsyncSession = Depends(get_async_session)\n):",
        "detail": "back.app.routers.interaction",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.opportunite",
        "description": "back.app.routers.opportunite",
        "peekOfCode": "router = APIRouter(prefix=\"/opportunites\", tags=[\"opportunites\"])\n@router.get(\"/count\", summary=\"Nombre total d'opportunités\")\nasync def count_opportunites(session: AsyncSession = Depends(get_async_session)):\n    result = await session.execute(select(func.count()).select_from(Opportunite))\n    return {\"total_opportunites\": result.scalar_one()}\n@router.post(\"\", response_model=OpportuniteRead, status_code=status.HTTP_201_CREATED)\nasync def create(data: OpportuniteCreate, session: AsyncSession = Depends(get_async_session)):\n    return await create_opportunite(session, data)\n@router.get(\"\", response_model=List[OpportuniteRead])\nasync def read_all(session: AsyncSession = Depends(get_async_session)):",
        "detail": "back.app.routers.opportunite",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.tache",
        "description": "back.app.routers.tache",
        "peekOfCode": "router = APIRouter(prefix=\"/taches\", tags=[\"Taches\"])\n@router.post(\"\", response_model=tache_schema.Tache)\nasync def create_tache(tache: tache_schema.TacheCreate, db: AsyncSession = Depends(get_async_session)):\n    return await crud_tache.create_tache(db=db, tache=tache)  # <- correction ici\n@router.get(\"\", response_model=List[tache_schema.Tache])\nasync def read_taches(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_async_session)):\n    result = await db.execute(select(Tache).offset(skip).limit(limit))\n    return result.scalars().all()\n@router.get(\"/{id_tache}\", response_model=tache_schema.Tache)\nasync def read_tache(id_tache: int, db: AsyncSession = Depends(get_async_session)):",
        "detail": "back.app.routers.tache",
        "documentation": {}
    },
    {
        "label": "StartCallRequest",
        "kind": 6,
        "importPath": "back.app.routers.video_calls",
        "description": "back.app.routers.video_calls",
        "peekOfCode": "class StartCallRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\nclass EndCallRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\n    duration: int\nclass StartRecordingRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int",
        "detail": "back.app.routers.video_calls",
        "documentation": {}
    },
    {
        "label": "EndCallRequest",
        "kind": 6,
        "importPath": "back.app.routers.video_calls",
        "description": "back.app.routers.video_calls",
        "peekOfCode": "class EndCallRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\n    duration: int\nclass StartRecordingRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\nclass StopRecordingRequest(BaseModel):\n    recording_id: str\n@router.post(\"/start\")",
        "detail": "back.app.routers.video_calls",
        "documentation": {}
    },
    {
        "label": "StartRecordingRequest",
        "kind": 6,
        "importPath": "back.app.routers.video_calls",
        "description": "back.app.routers.video_calls",
        "peekOfCode": "class StartRecordingRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\nclass StopRecordingRequest(BaseModel):\n    recording_id: str\n@router.post(\"/start\")\nasync def start_call(\n    request: StartCallRequest,\n    db: Session = Depends(get_db)\n) -> Dict[str, Any]:",
        "detail": "back.app.routers.video_calls",
        "documentation": {}
    },
    {
        "label": "StopRecordingRequest",
        "kind": 6,
        "importPath": "back.app.routers.video_calls",
        "description": "back.app.routers.video_calls",
        "peekOfCode": "class StopRecordingRequest(BaseModel):\n    recording_id: str\n@router.post(\"/start\")\nasync def start_call(\n    request: StartCallRequest,\n    db: Session = Depends(get_db)\n) -> Dict[str, Any]:\n    \"\"\"\n    Endpoint: POST /api/video-calls/start\n    Démarrer un nouvel appel vidéo entre un contact et un utilisateur",
        "detail": "back.app.routers.video_calls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "back.app.routers.video_calls",
        "description": "back.app.routers.video_calls",
        "peekOfCode": "router = APIRouter(prefix=\"/api/video-calls\", tags=[\"video-calls\"])\nclass StartCallRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\nclass EndCallRequest(BaseModel):\n    contact_id: int\n    utilisateur_id: int\n    duration: int\nclass StartRecordingRequest(BaseModel):\n    contact_id: int",
        "detail": "back.app.routers.video_calls",
        "documentation": {}
    },
    {
        "label": "UtilisateurBase",
        "kind": 6,
        "importPath": "back.app.schemas.Utilisateur",
        "description": "back.app.schemas.Utilisateur",
        "peekOfCode": "class UtilisateurBase(BaseModel):\n    nom: str\n    prenom: str\n    email: EmailStr\n    role: str\n    numero_tel: str\n    photo_profil: Optional[str] = None  # Nouveau champ\nclass UtilisateurCreate(UtilisateurBase):\n    mot_de_passe: str\nclass UtilisateurRead(UtilisateurBase):",
        "detail": "back.app.schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurCreate",
        "kind": 6,
        "importPath": "back.app.schemas.Utilisateur",
        "description": "back.app.schemas.Utilisateur",
        "peekOfCode": "class UtilisateurCreate(UtilisateurBase):\n    mot_de_passe: str\nclass UtilisateurRead(UtilisateurBase):\n    id_utilisateur: int\nclass UtilisateurDelete(BaseModel):\n    confirmation: bool\nclass UtilisateurUpdate(BaseModel):\n    nom: Optional[str] = None\n    prenom: Optional[str] = None\n    email: Optional[EmailStr] = None",
        "detail": "back.app.schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurRead",
        "kind": 6,
        "importPath": "back.app.schemas.Utilisateur",
        "description": "back.app.schemas.Utilisateur",
        "peekOfCode": "class UtilisateurRead(UtilisateurBase):\n    id_utilisateur: int\nclass UtilisateurDelete(BaseModel):\n    confirmation: bool\nclass UtilisateurUpdate(BaseModel):\n    nom: Optional[str] = None\n    prenom: Optional[str] = None\n    email: Optional[EmailStr] = None\n    mot_de_passe: Optional[str] = None\n    photo_profil: Optional[str] = None  ",
        "detail": "back.app.schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurDelete",
        "kind": 6,
        "importPath": "back.app.schemas.Utilisateur",
        "description": "back.app.schemas.Utilisateur",
        "peekOfCode": "class UtilisateurDelete(BaseModel):\n    confirmation: bool\nclass UtilisateurUpdate(BaseModel):\n    nom: Optional[str] = None\n    prenom: Optional[str] = None\n    email: Optional[EmailStr] = None\n    mot_de_passe: Optional[str] = None\n    photo_profil: Optional[str] = None  \n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "UtilisateurUpdate",
        "kind": 6,
        "importPath": "back.app.schemas.Utilisateur",
        "description": "back.app.schemas.Utilisateur",
        "peekOfCode": "class UtilisateurUpdate(BaseModel):\n    nom: Optional[str] = None\n    prenom: Optional[str] = None\n    email: Optional[EmailStr] = None\n    mot_de_passe: Optional[str] = None\n    photo_profil: Optional[str] = None  \n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.Utilisateur",
        "documentation": {}
    },
    {
        "label": "ContactBase",
        "kind": 6,
        "importPath": "back.app.schemas.contact",
        "description": "back.app.schemas.contact",
        "peekOfCode": "class ContactBase(BaseModel):\n    nom: Optional[str] = None\n    prenom: Optional[str] = None\n    entreprise: Optional[str] = None\n    telephone: Optional[str] = None\n    email: Optional[str] = None\n    adresse: Optional[str] = None\n    fonction: Optional[str] = None\n    source: Optional[str] = None\n    secteur: Optional[str] = None",
        "detail": "back.app.schemas.contact",
        "documentation": {}
    },
    {
        "label": "ContactCreate",
        "kind": 6,
        "importPath": "back.app.schemas.contact",
        "description": "back.app.schemas.contact",
        "peekOfCode": "class ContactCreate(ContactBase):\n    nom: str\n    prenom: str\n    id_utilisateur: int\nclass ContactUpdate(ContactBase):\n    pass\nclass ContactRead(ContactBase):\n    id: int = Field(..., alias=\"id_contact\")  # <-- alias ici\n    id_utilisateur: int\n    class Config:",
        "detail": "back.app.schemas.contact",
        "documentation": {}
    },
    {
        "label": "ContactUpdate",
        "kind": 6,
        "importPath": "back.app.schemas.contact",
        "description": "back.app.schemas.contact",
        "peekOfCode": "class ContactUpdate(ContactBase):\n    pass\nclass ContactRead(ContactBase):\n    id: int = Field(..., alias=\"id_contact\")  # <-- alias ici\n    id_utilisateur: int\n    class Config:\n        orm_mode = True\n        allow_population_by_field_name = True  # permet d'utiliser aussi \"id\" comme champ lors de la création",
        "detail": "back.app.schemas.contact",
        "documentation": {}
    },
    {
        "label": "ContactRead",
        "kind": 6,
        "importPath": "back.app.schemas.contact",
        "description": "back.app.schemas.contact",
        "peekOfCode": "class ContactRead(ContactBase):\n    id: int = Field(..., alias=\"id_contact\")  # <-- alias ici\n    id_utilisateur: int\n    class Config:\n        orm_mode = True\n        allow_population_by_field_name = True  # permet d'utiliser aussi \"id\" comme champ lors de la création",
        "detail": "back.app.schemas.contact",
        "documentation": {}
    },
    {
        "label": "EmailRequest",
        "kind": 6,
        "importPath": "back.app.schemas.email",
        "description": "back.app.schemas.email",
        "peekOfCode": "class EmailRequest(BaseModel):\n    destinator: EmailStr\n    subject: str\n    body: str",
        "detail": "back.app.schemas.email",
        "documentation": {}
    },
    {
        "label": "EntrepriseBase",
        "kind": 6,
        "importPath": "back.app.schemas.entreprise",
        "description": "back.app.schemas.entreprise",
        "peekOfCode": "class EntrepriseBase(BaseModel):\n    nom: str\n    adresse: Optional[str] = None\n    secteur: Optional[str] = None\n    telephone: Optional[str] = None\n    email: Optional[EmailStr] = None\nclass EntrepriseCreate(EntrepriseBase):\n    pass\nclass EntrepriseRead(EntrepriseBase):\n    id_entreprise: int",
        "detail": "back.app.schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseCreate",
        "kind": 6,
        "importPath": "back.app.schemas.entreprise",
        "description": "back.app.schemas.entreprise",
        "peekOfCode": "class EntrepriseCreate(EntrepriseBase):\n    pass\nclass EntrepriseRead(EntrepriseBase):\n    id_entreprise: int\n    class Config:\n        orm_mode = True\nclass EntrepriseUpdate(EntrepriseBase):\n    pass",
        "detail": "back.app.schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseRead",
        "kind": 6,
        "importPath": "back.app.schemas.entreprise",
        "description": "back.app.schemas.entreprise",
        "peekOfCode": "class EntrepriseRead(EntrepriseBase):\n    id_entreprise: int\n    class Config:\n        orm_mode = True\nclass EntrepriseUpdate(EntrepriseBase):\n    pass",
        "detail": "back.app.schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "EntrepriseUpdate",
        "kind": 6,
        "importPath": "back.app.schemas.entreprise",
        "description": "back.app.schemas.entreprise",
        "peekOfCode": "class EntrepriseUpdate(EntrepriseBase):\n    pass",
        "detail": "back.app.schemas.entreprise",
        "documentation": {}
    },
    {
        "label": "InteractionBase",
        "kind": 6,
        "importPath": "back.app.schemas.interaction",
        "description": "back.app.schemas.interaction",
        "peekOfCode": "class InteractionBase(BaseModel):\n    type: str\n    date_interaction: datetime\n    contenu: Optional[str] = None\n    fichier_joint: Optional[str] = None\n    id_contact: int\nclass InteractionCreate(InteractionBase):\n    pass\nclass InteractionRead(InteractionBase):\n    id_interaction: int",
        "detail": "back.app.schemas.interaction",
        "documentation": {}
    },
    {
        "label": "InteractionCreate",
        "kind": 6,
        "importPath": "back.app.schemas.interaction",
        "description": "back.app.schemas.interaction",
        "peekOfCode": "class InteractionCreate(InteractionBase):\n    pass\nclass InteractionRead(InteractionBase):\n    id_interaction: int\n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.interaction",
        "documentation": {}
    },
    {
        "label": "InteractionRead",
        "kind": 6,
        "importPath": "back.app.schemas.interaction",
        "description": "back.app.schemas.interaction",
        "peekOfCode": "class InteractionRead(InteractionBase):\n    id_interaction: int\n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.interaction",
        "documentation": {}
    },
    {
        "label": "OpportuniteBase",
        "kind": 6,
        "importPath": "back.app.schemas.opportunite",
        "description": "back.app.schemas.opportunite",
        "peekOfCode": "class OpportuniteBase(BaseModel):\n    titre: str\n    description: Optional[str]\n    date_interaction: datetime\n    contenu: Optional[str]\n    date_creation: date\n    prob_abill_suc: int\n    statut: str\n    etape_pipeline: str\n    id_utilisateur: int",
        "detail": "back.app.schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "OpportuniteCreate",
        "kind": 6,
        "importPath": "back.app.schemas.opportunite",
        "description": "back.app.schemas.opportunite",
        "peekOfCode": "class OpportuniteCreate(OpportuniteBase):\n    pass\nclass OpportuniteRead(OpportuniteBase):\n    id_opportunite: int\n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "OpportuniteRead",
        "kind": 6,
        "importPath": "back.app.schemas.opportunite",
        "description": "back.app.schemas.opportunite",
        "peekOfCode": "class OpportuniteRead(OpportuniteBase):\n    id_opportunite: int\n    class Config:\n        orm_mode = True",
        "detail": "back.app.schemas.opportunite",
        "documentation": {}
    },
    {
        "label": "TacheBase",
        "kind": 6,
        "importPath": "back.app.schemas.tache",
        "description": "back.app.schemas.tache",
        "peekOfCode": "class TacheBase(BaseModel):\n    titre: str\n    description: Optional[str] = None\n    date_echeance: Optional[date] = None\n    est_recurrente: Optional[bool] = False\n    rappel: Optional[datetime] = None\n    statut: Optional[str] = None\n    id_opportunite: int\nclass TacheCreate(TacheBase):\n    pass",
        "detail": "back.app.schemas.tache",
        "documentation": {}
    },
    {
        "label": "TacheCreate",
        "kind": 6,
        "importPath": "back.app.schemas.tache",
        "description": "back.app.schemas.tache",
        "peekOfCode": "class TacheCreate(TacheBase):\n    pass\nclass TacheUpdate(BaseModel):\n    titre: Optional[str] = None\n    description: Optional[str] = None\n    date_echeance: Optional[date] = None\n    est_recurrente: Optional[bool] = None\n    rappel: Optional[datetime] = None\n    statut: Optional[str] = None\n    id_opportunite: Optional[int] = None",
        "detail": "back.app.schemas.tache",
        "documentation": {}
    },
    {
        "label": "TacheUpdate",
        "kind": 6,
        "importPath": "back.app.schemas.tache",
        "description": "back.app.schemas.tache",
        "peekOfCode": "class TacheUpdate(BaseModel):\n    titre: Optional[str] = None\n    description: Optional[str] = None\n    date_echeance: Optional[date] = None\n    est_recurrente: Optional[bool] = None\n    rappel: Optional[datetime] = None\n    statut: Optional[str] = None\n    id_opportunite: Optional[int] = None\nclass TacheInDBBase(TacheBase):\n    id_tache: int",
        "detail": "back.app.schemas.tache",
        "documentation": {}
    },
    {
        "label": "TacheInDBBase",
        "kind": 6,
        "importPath": "back.app.schemas.tache",
        "description": "back.app.schemas.tache",
        "peekOfCode": "class TacheInDBBase(TacheBase):\n    id_tache: int\n    class Config:\n        orm_mode = True\nclass Tache(TacheInDBBase):\n    pass",
        "detail": "back.app.schemas.tache",
        "documentation": {}
    },
    {
        "label": "Tache",
        "kind": 6,
        "importPath": "back.app.schemas.tache",
        "description": "back.app.schemas.tache",
        "peekOfCode": "class Tache(TacheInDBBase):\n    pass",
        "detail": "back.app.schemas.tache",
        "documentation": {}
    },
    {
        "label": "DB_USER",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DB_USER = os.getenv(\"DB_USER\", \"postgres\")\nDB_PASS = os.getenv(\"DB_PASS\", \"root\")\nDB_NAME = os.getenv(\"DB_NAME\", \"db_crm\")\nDB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\nDB_PORT = os.getenv(\"DB_PORT\", \"5432\")\nDATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "DB_PASS",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DB_PASS = os.getenv(\"DB_PASS\", \"root\")\nDB_NAME = os.getenv(\"DB_NAME\", \"db_crm\")\nDB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\nDB_PORT = os.getenv(\"DB_PORT\", \"5432\")\nDATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DB_NAME = os.getenv(\"DB_NAME\", \"db_crm\")\nDB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\nDB_PORT = os.getenv(\"DB_PORT\", \"5432\")\nDATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "DB_HOST",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\nDB_PORT = os.getenv(\"DB_PORT\", \"5432\")\nDATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "DB_PORT",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DB_PORT = os.getenv(\"DB_PORT\", \"5432\")\nDATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "back.app.config",
        "description": "back.app.config",
        "peekOfCode": "DATABASE_URL = f\"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"",
        "detail": "back.app.config",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "back.app.database",
        "description": "back.app.database",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL, echo=True)\nBase = declarative_base()\nasync_session = sessionmaker(\n    engine,\n    expire_on_commit=False,\n    class_=AsyncSession\n)\nasync def get_async_session():\n    async with async_session() as session:\n        yield session",
        "detail": "back.app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "back.app.database",
        "description": "back.app.database",
        "peekOfCode": "Base = declarative_base()\nasync_session = sessionmaker(\n    engine,\n    expire_on_commit=False,\n    class_=AsyncSession\n)\nasync def get_async_session():\n    async with async_session() as session:\n        yield session\n# Alias cohérent pour l’import",
        "detail": "back.app.database",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "back.app.database",
        "description": "back.app.database",
        "peekOfCode": "async_session = sessionmaker(\n    engine,\n    expire_on_commit=False,\n    class_=AsyncSession\n)\nasync def get_async_session():\n    async with async_session() as session:\n        yield session\n# Alias cohérent pour l’import\nget_db = get_async_session",
        "detail": "back.app.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 5,
        "importPath": "back.app.database",
        "description": "back.app.database",
        "peekOfCode": "get_db = get_async_session\nasync def test_connection():\n    try:\n        async with engine.connect() as conn:\n            await conn.execute(text(\"SELECT 1\"))\n            print(\"✅ Base de données connectée avec succès.\")\n    except Exception as e:\n        print(\"❌ Échec de connexion à la base de données :\", e)\nasync def init_models():\n    async with engine.begin() as conn:",
        "detail": "back.app.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "back.app.main",
        "description": "back.app.main",
        "peekOfCode": "app = FastAPI(title=\"Video Call Recording API\", version=\"1.0.0\")\n# Configuration CORS\norigins = [\"http://localhost:3000\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "back.app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "back.app.main",
        "description": "back.app.main",
        "peekOfCode": "origins = [\"http://localhost:3000\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Inclusion des routes\napp.include_router(Utilisateur.router)",
        "detail": "back.app.main",
        "documentation": {}
    }
]